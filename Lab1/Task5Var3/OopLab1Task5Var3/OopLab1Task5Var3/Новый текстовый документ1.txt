// OopLab1Task5Var3.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <iostream>
#include <fstream>
#include <cstring>
#include <string>
#include <vector>

const char BEGIN_CHAR = '0';
const char FILL_CHAR = ' ';
const char FILL_TO_CHAR = '.';


using namespace std;


void FillArea(string(&stringLst)[102], vector<pair<int, int>> startDots, int row, int col)
{
	if (stringLst[row][col] == FILL_CHAR)
	{
		stringLst[row][col] = FILL_TO_CHAR;
		if (stringLst[row + 1][col] != '#')
			FillArea(stringLst, startDots, row + 1, col);
		if (stringLst[row - 1][col] != '#')
			FillArea(stringLst, startDots, row - 1, col);
		if (stringLst[row][col - 1] != '#')
			FillArea(stringLst, startDots, row, col - 1);
		if (stringLst[row][col + 1] != '#')
			FillArea(stringLst, startDots, row, col + 1);
	}
	/*while (startDots.size() > 0)
	{
	int row = startDots[0].first;
	int col = startDots[0].second;
	if (area[col][row] != '.' && area[col][row] != '#')
	{
	area[col][row] = '.';
	if (row > 0)
	{
	startDots.push_back(make_pair(row - 1, col));
	}
	if (row < 101)
	{
	startDots.push_back(make_pair(row + 1, col));
	}
	if (col > 0)
	{
	startDots.push_back(make_pair(row, col - 1));
	}
	if (col < 101)
	{
	startDots.push_back(make_pair(row, col + 1));
	}
	}
	startDots.erase(startDots.begin());
	}*/
}
vector<pair<int, int>> GetPositionDots(string(&stringLst)[102], vector< pair<int, int> > startDots)
{
	for (int numLine = 0; numLine < 102; numLine++)
	{
		int positionStartDots = int(stringLst[numLine].find(BEGIN_CHAR));
		if (positionStartDots != string::npos)
		{
			startDots.push_back(pair<int, int>(numLine, positionStartDots));
		}
	}
	return startDots;
}
void GetArea(const string & fileName, string(&stringLst)[102])
{
	string latticeSet;
	string latticeSet1;
	string sizeArea;
	for (int i = 0; i < 100; i++)
	{
		sizeArea += " ";
	}
	for (int i = 0; i < 102; i++)
	{
		latticeSet += "#";
	
	}
	for (int i = 0; i < 101; i++)
	{
		latticeSet1 += "#";
	}
	stringLst[0] = latticeSet + "\n";
	ifstream areaFileInput(fileName);
	if (areaFileInput.is_open())
	{
		int num = 1;
		string line;
		while (getline(areaFileInput, line))
		{
			line = "#" + line;
			if (line.length() < 100)
			{
				for (size_t i = line.length(); i < 101; i++)
				{
					line += " ";
					if (i == 100)
					{
						line += "#";
					}
				}

			}
			stringLst[num] += line + "\n";
			cout << stringLst[num];
			num++;
		}
		while (num < 102)
		{
			
			cout << stringLst[num];
			if (num == 100)
			{
				stringLst[num]+= latticeSet1;
				
			}
			else
				stringLst[num] += "#" + sizeArea + "#" + "\n";
			num++;
		}
	}
	else
	{
		cout << "error with opening input file";
	}

	areaFileInput.close();
}
void WriteInOutputFile(string(&stringLst)[102], const string outputFileName)
{
	int num = 0;
	ofstream outFile(outputFileName);
	for (int i = 0; i < 102; i++)
	{
		outFile << stringLst[i];
	}

	/*ofstream outFile(outputFileName);
	for (int i = 1; i < area.size() - 1; i++)
	{
		string rowString;
		rowString = area[i];
		for (int g = 1; g < area.size() - 1; g++)
		{
			outFile << rowString[g];
			if (g == 100) outFile << "\n";
		}
	}*/
}
void GetAreaFinish(vector<pair<int, int>> startDots, string(&stringLst)[102])
{
	for (unsigned i = 0; i < startDots.size(); ++i)
	{/*
	 const char BEGIN_CHAR = '0';
	 const char FILL_CHAR = ' ';
	 const char FILL_TO_CHAR = '.';*/
		stringLst[startDots[i].first][startDots[i].second] = FILL_CHAR;
		FillArea(stringLst, startDots, startDots[i].first, startDots[i].second);
		stringLst[startDots[i].first][startDots[i].second] = BEGIN_CHAR;
	}
}
//string(&stringLst)[102]
int main(int argc, char* argv[])
{
	if (argc != 3)
	{
		cout << "Wrong amount of arguments was proposed\nEnter a correct arguments amount please, for example:\n'programm.exe <input file> <output file>";
		return 1;
	}
	string stringLst[102];
	string inputFileName = argv[1];
	string outputFileName = argv[2];
	vector< pair<int, int> > startDots;
	vector<string> area;
	GetArea(inputFileName, stringLst);
	
	//WriteInOutputFile(stringLst, outputFileName);
	if (stringLst[0] == "error")
	{
		return 1;
	}
	if (GetPositionDots(stringLst, startDots).empty())
	{
		WriteInOutputFile(stringLst, outputFileName);
		return 0;
	}
	startDots = GetPositionDots(stringLst, startDots);
	GetAreaFinish(startDots, stringLst);
	WriteInOutputFile(stringLst, outputFileName);
	return 0;
}

